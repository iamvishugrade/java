Compiled from "Arrays.java"
public class java.util.Arrays {
  static final boolean $assertionsDisabled;
  public static void sort(int[]);
  public static void sort(int[], int, int);
  public static void sort(long[]);
  public static void sort(long[], int, int);
  public static void sort(short[]);
  public static void sort(short[], int, int);
  public static void sort(char[]);
  public static void sort(char[], int, int);
  public static void sort(byte[]);
  public static void sort(byte[], int, int);
  public static void sort(float[]);
  public static void sort(float[], int, int);
  public static void sort(double[]);
  public static void sort(double[], int, int);
  public static void sort(java.lang.Object[]);
  public static void sort(java.lang.Object[], int, int);
  public static <T extends java/lang/Object> void sort(T[], java.util.Comparator<? super T>);
  public static <T extends java/lang/Object> void sort(T[], int, int, java.util.Comparator<? super T>);
  public static int binarySearch(long[], long);
  public static int binarySearch(long[], int, int, long);
  public static int binarySearch(int[], int);
  public static int binarySearch(int[], int, int, int);
  public static int binarySearch(short[], short);
  public static int binarySearch(short[], int, int, short);
  public static int binarySearch(char[], char);
  public static int binarySearch(char[], int, int, char);
  public static int binarySearch(byte[], byte);
  public static int binarySearch(byte[], int, int, byte);
  public static int binarySearch(double[], double);
  public static int binarySearch(double[], int, int, double);
  public static int binarySearch(float[], float);
  public static int binarySearch(float[], int, int, float);
  public static int binarySearch(java.lang.Object[], java.lang.Object);
  public static int binarySearch(java.lang.Object[], int, int, java.lang.Object);
  public static <T extends java/lang/Object> int binarySearch(T[], T, java.util.Comparator<? super T>);
  public static <T extends java/lang/Object> int binarySearch(T[], int, int, T, java.util.Comparator<? super T>);
  public static boolean equals(long[], long[]);
  public static boolean equals(int[], int[]);
  public static boolean equals(short[], short[]);
  public static boolean equals(char[], char[]);
  public static boolean equals(byte[], byte[]);
  public static boolean equals(boolean[], boolean[]);
  public static boolean equals(double[], double[]);
  public static boolean equals(float[], float[]);
  public static boolean equals(java.lang.Object[], java.lang.Object[]);
  public static void fill(long[], long);
  public static void fill(long[], int, int, long);
  public static void fill(int[], int);
  public static void fill(int[], int, int, int);
  public static void fill(short[], short);
  public static void fill(short[], int, int, short);
  public static void fill(char[], char);
  public static void fill(char[], int, int, char);
  public static void fill(byte[], byte);
  public static void fill(byte[], int, int, byte);
  public static void fill(boolean[], boolean);
  public static void fill(boolean[], int, int, boolean);
  public static void fill(double[], double);
  public static void fill(double[], int, int, double);
  public static void fill(float[], float);
  public static void fill(float[], int, int, float);
  public static void fill(java.lang.Object[], java.lang.Object);
  public static void fill(java.lang.Object[], int, int, java.lang.Object);
  public static <T extends java/lang/Object> T[] copyOf(T[], int);
  public static <T extends java/lang/Object, U extends java/lang/Object> T[] copyOf(U[], int, java.lang.Class<? extends T[]>);
  public static byte[] copyOf(byte[], int);
  public static short[] copyOf(short[], int);
  public static int[] copyOf(int[], int);
  public static long[] copyOf(long[], int);
  public static char[] copyOf(char[], int);
  public static float[] copyOf(float[], int);
  public static double[] copyOf(double[], int);
  public static boolean[] copyOf(boolean[], int);
  public static <T extends java/lang/Object> T[] copyOfRange(T[], int, int);
  public static <T extends java/lang/Object, U extends java/lang/Object> T[] copyOfRange(U[], int, int, java.lang.Class<? extends T[]>);
  public static byte[] copyOfRange(byte[], int, int);
  public static short[] copyOfRange(short[], int, int);
  public static int[] copyOfRange(int[], int, int);
  public static long[] copyOfRange(long[], int, int);
  public static char[] copyOfRange(char[], int, int);
  public static float[] copyOfRange(float[], int, int);
  public static double[] copyOfRange(double[], int, int);
  public static boolean[] copyOfRange(boolean[], int, int);
  public static <T extends java/lang/Object> java.util.List<T> asList(T...);
  public static int hashCode(long[]);
  public static int hashCode(int[]);
  public static int hashCode(short[]);
  public static int hashCode(char[]);
  public static int hashCode(byte[]);
  public static int hashCode(boolean[]);
  public static int hashCode(float[]);
  public static int hashCode(double[]);
  public static int hashCode(java.lang.Object[]);
  public static int deepHashCode(java.lang.Object[]);
  public static boolean deepEquals(java.lang.Object[], java.lang.Object[]);
  static boolean deepEquals0(java.lang.Object, java.lang.Object);
  public static java.lang.String toString(long[]);
  public static java.lang.String toString(int[]);
  public static java.lang.String toString(short[]);
  public static java.lang.String toString(char[]);
  public static java.lang.String toString(byte[]);
  public static java.lang.String toString(boolean[]);
  public static java.lang.String toString(float[]);
  public static java.lang.String toString(double[]);
  public static java.lang.String toString(java.lang.Object[]);
  public static java.lang.String deepToString(java.lang.Object[]);
  static {};
}
